-- hds header_start
--
-- VHDL Entity final_lab.mk_51a.symbol
--
-- Created:
--          by - Y50-70.UNKNOWN (LENOVO)
--          at - 13:07:15 05/30/18
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2002.1a (Build 22)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY mk_51a IS
-- Declarations

END mk_51a ;

-- hds interface_end
--
-- VHDL Architecture final_lab.mk_51a.struct
--
-- Created:
--          by - Y50-70.UNKNOWN (LENOVO)
--          at - 13:07:15 05/30/18
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2002.1a (Build 22)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY final_lab;
USE final_lab.in_states.ALL;
USE ieee.std_logic_unsigned.ALL;
USE ieee.std_logic_textio.ALL;
LIBRARY std;
USE std.textio.ALL;

LIBRARY final_lab;

ARCHITECTURE struct OF mk_51a IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A_Rd         : std_logic;
   SIGNAL A_Wr         : std_logic;
   SIGNAL Alu_Rd       : std_logic;
   SIGNAL E_Ram        : std_logic;
   SIGNAL E_Rom        : std_logic;
   SIGNAL PC_HL        : std_logic;
   SIGNAL PC_Rd        : std_logic;
   SIGNAL PC_Wr        : std_logic;
   SIGNAL PC_inc       : std_logic;
   SIGNAL PC_rst       : std_logic;
   SIGNAL PSW_Rd       : std_logic;
   SIGNAL PSW_Wr       : std_logic;
   SIGNAL Rd_Comm      : std_logic;
   SIGNAL Rw_Ram       : std_logic;
   SIGNAL Temp_Wr      : std_logic;
   SIGNAL Wr_Addr      : std_logic;
   SIGNAL Wr_Comm      : std_logic;
   SIGNAL addr_out     : std_logic_vector(7 DOWNTO 0);
   SIGNAL alu_set      : st_alu;
   SIGNAL clk          : std_logic;
   SIGNAL comm_out     : std_logic_vector(7 DOWNTO 0);
   SIGNAL compare      : std_logic;
   SIGNAL mux_res      : std_logic_vector(7 DOWNTO 0);
   SIGNAL output       : std_logic_vector(7 DOWNTO 0);
   SIGNAL pc_out16     : std_logic_vector(15 DOWNTO 0);
   SIGNAL pc_output8   : std_logic_vector(7 DOWNTO 0);
   SIGNAL psw_out      : std_logic_vector(7 DOWNTO 0);
   SIGNAL rst          : std_logic;
   SIGNAL temp_mux_sel : std_logic;
   SIGNAL temp_out     : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT mk_alu
   PORT (
      inA     : IN     std_logic_vector (7 DOWNTO 0);
      inPSW   : IN     std_logic_vector (7 DOWNTO 0);
      inTemp  : IN     std_logic_vector (7 DOWNTO 0);
      state   : IN     st_alu ;
      compare : OUT    std_logic ;
      output8 : OUT    std_logic_vector (7 DOWNTO 0);
      rd      : IN     std_logic ;
      clk     : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT mk_pc
   PORT (
      HL        : IN     std_logic ;
      clk       : IN     std_logic ;
      inc       : IN     std_logic ;
      rd        : IN     std_logic ;
      res       : IN     std_logic ;
      wr        : IN     std_logic ;
      pc_out16  : OUT    std_logic_vector (15 DOWNTO 0);
      pc_inout8 : INOUT  std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mk_ram
   PORT (
      addr : IN     std_logic_vector (7 DOWNTO 0);
      clk  : IN     std_logic ;
      en   : IN     std_logic ;
      rw   : IN     std_logic ;
      data : INOUT  std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mk_reg1
   PORT (
      Wr     : IN     std_logic ;
      clk    : IN     std_logic ;
      input  : IN     std_logic_vector (7 DOWNTO 0);
      output : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mk_reg2
   PORT (
      clk    : IN     std_logic ;
      rd     : IN     std_logic ;
      wr     : IN     std_logic ;
      output : OUT    std_logic_vector (7 DOWNTO 0);
      input  : INOUT  std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mk_rom
   PORT (
      addr : IN     std_logic_vector (15 DOWNTO 0);
      clk  : IN     std_logic ;
      en   : IN     std_logic ;
      data : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mk_uu
   PORT (
      Comm_bus     : IN     std_logic_vector (7 DOWNTO 0);
      Data_bus     : IN     std_logic_vector (7 DOWNTO 0);
      clk          : IN     std_logic ;
      comp         : IN     std_logic ;
      rst          : IN     std_logic ;
      A_Rd         : OUT    std_logic ;
      A_Wr         : OUT    std_logic ;
      Alu_Rd       : OUT    std_logic ;
      E_Ram        : OUT    std_logic ;
      E_Rom        : OUT    std_logic ;
      PC_HL        : OUT    std_logic ;
      PC_Rd        : OUT    std_logic ;
      PC_Wr        : OUT    std_logic ;
      PC_inc       : OUT    std_logic ;
      PC_rst       : OUT    std_logic ;
      PSW_Rd       : OUT    std_logic ;
      PSW_Wr       : OUT    std_logic ;
      Rd_Comm      : OUT    std_logic ;
      Rw_Ram       : OUT    std_logic ;
      Temp_Wr      : OUT    std_logic ;
      Wr_Addr      : OUT    std_logic ;
      Wr_Comm      : OUT    std_logic ;
      alu_set      : OUT    st_alu ;
      temp_mux_sel : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT tb
   PORT (
      clk : OUT    std_logic ;
      rst : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT temp_mux
   PORT (
      clk     : IN     std_logic ;
      comm    : IN     std_logic_vector (7 DOWNTO 0);
      ram     : IN     std_logic_vector (7 DOWNTO 0);
      sel     : IN     std_logic ;
      mux_res : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : mk_alu USE ENTITY final_lab.mk_alu(alu);
   FOR ALL : mk_pc USE ENTITY final_lab.mk_pc(pc);
   FOR ALL : mk_ram USE ENTITY final_lab.mk_ram(ram);
   FOR ALL : mk_reg1 USE ENTITY final_lab.mk_reg1(reg1);
   FOR ALL : mk_reg2 USE ENTITY final_lab.mk_reg2(reg2);
   FOR ALL : mk_rom USE ENTITY final_lab.mk_rom(rom);
   FOR ALL : mk_uu USE ENTITY final_lab.mk_uu(uu);
   FOR ALL : tb USE ENTITY final_lab.tb(tb);
   FOR ALL : temp_mux USE ENTITY final_lab.temp_mux(mux);
   -- pragma synthesis_on


BEGIN
   -- Instance port mappings.
   I0 : mk_alu
      PORT MAP (
         inA     => output,
         inPSW   => psw_out,
         inTemp  => temp_out,
         state   => alu_set,
         compare => compare,
         output8 => pc_output8,
         rd      => Alu_Rd,
         clk     => clk
      );
   I1 : mk_pc
      PORT MAP (
         HL        => PC_HL,
         clk       => clk,
         inc       => PC_inc,
         rd        => PC_Rd,
         res       => PC_rst,
         wr        => PC_Wr,
         pc_out16  => pc_out16,
         pc_inout8 => pc_output8
      );
   I2 : mk_ram
      PORT MAP (
         addr => addr_out,
         clk  => clk,
         en   => E_Ram,
         rw   => Rw_Ram,
         data => pc_output8
      );
   I3 : mk_reg1
      PORT MAP (
         Wr     => Temp_Wr,
         clk    => clk,
         input  => mux_res,
         output => temp_out
      );
   I7 : mk_reg1
      PORT MAP (
         Wr     => Wr_Addr,
         clk    => clk,
         input  => pc_output8,
         output => addr_out
      );
   I4 : mk_reg2
      PORT MAP (
         clk    => clk,
         rd     => PSW_Rd,
         wr     => PSW_Wr,
         output => psw_out,
         input  => pc_output8
      );
   I9 : mk_reg2
      PORT MAP (
         clk    => clk,
         rd     => A_Rd,
         wr     => A_Wr,
         output => output,
         input  => pc_output8
      );
   I8 : mk_reg2
      PORT MAP (
         clk    => clk,
         rd     => Rd_Comm,
         wr     => Wr_Comm,
         output => comm_out,
         input  => pc_output8
      );
   I5 : mk_rom
      PORT MAP (
         addr => pc_out16,
         clk  => clk,
         en   => E_Rom,
         data => pc_output8
      );
   I6 : mk_uu
      PORT MAP (
         Comm_bus     => comm_out,
         Data_bus     => pc_output8,
         clk          => clk,
         comp         => compare,
         rst          => rst,
         A_Rd         => A_Rd,
         A_Wr         => A_Wr,
         Alu_Rd       => Alu_Rd,
         E_Ram        => E_Ram,
         E_Rom        => E_Rom,
         PC_HL        => PC_HL,
         PC_Rd        => PC_Rd,
         PC_Wr        => PC_Wr,
         PC_inc       => PC_inc,
         PC_rst       => PC_rst,
         PSW_Rd       => PSW_Rd,
         PSW_Wr       => PSW_Wr,
         Rd_Comm      => Rd_Comm,
         Rw_Ram       => Rw_Ram,
         Temp_Wr      => Temp_Wr,
         Wr_Addr      => Wr_Addr,
         Wr_Comm      => Wr_Comm,
         alu_set      => alu_set,
         temp_mux_sel => temp_mux_sel
      );
   I10 : tb
      PORT MAP (
         clk => clk,
         rst => rst
      );
   I11 : temp_mux
      PORT MAP (
         clk     => clk,
         comm    => comm_out,
         ram     => pc_output8,
         sel     => temp_mux_sel,
         mux_res => mux_res
      );

END struct;
